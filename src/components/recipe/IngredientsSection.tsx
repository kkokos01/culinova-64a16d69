
import React from "react";
import { AlertTriangle } from "lucide-react";
import { Ingredient } from "@/types";
import IngredientItem from "./IngredientItem";

interface IngredientsSectionProps {
  ingredients: Ingredient[];
  selectedIngredients: Map<string, { ingredient: Ingredient, action: "increase" | "decrease" | "remove" }>;
  onSelectIngredient: (ingredient: Ingredient, action: "increase" | "decrease" | "remove" | null) => void;
}

const IngredientsSection: React.FC<IngredientsSectionProps> = ({
  ingredients,
  selectedIngredients,
  onSelectIngredient
}) => {
  // Are we using test data?
  const hasTestData = ingredients.some(i => 
    i?.food?.name?.includes('Test Food') || 
    i?.food?.name?.includes('Parent Food')
  );

  // Check if we have ingredients without food details
  const hasIncompleteData = ingredients.some(i => !i.food || !i.food.name);

  return (
    <div className="mb-6">
      <h2 className="text-xl sm:text-2xl font-bold text-gray-900 mb-3">
        Ingredients
      </h2>
      
      {hasTestData && (
        <div className="flex items-center mb-3 p-2 bg-amber-50 border border-amber-200 rounded-md">
          <AlertTriangle className="text-amber-500 mr-2 h-5 w-5 flex-shrink-0" />
          <p className="text-amber-700 text-sm">
            This recipe contains test data. The ingredients shown are placeholder names generated by the system.
          </p>
        </div>
      )}
      
      {hasIncompleteData && (
        <div className="flex items-center mb-3 p-2 bg-red-50 border border-red-200 rounded-md">
          <AlertTriangle className="text-red-500 mr-2 h-5 w-5 flex-shrink-0" />
          <p className="text-red-700 text-sm">
            Some ingredients are missing food information. This may indicate a database connectivity issue.
          </p>
        </div>
      )}
      
      {ingredients.length > 0 ? (
        <div className="grid sm:grid-cols-2 gap-2">
          {ingredients.map((ingredient) => {
            if (!ingredient || !ingredient.id) return null;
            
            const selected = selectedIngredients.has(ingredient.id);
            const action = selectedIngredients.get(ingredient.id)?.action;
            
            return (
              <IngredientItem
                key={ingredient.id}
                ingredient={ingredient}
                isSelected={selected}
                selectedAction={action}
                onSelectIngredient={onSelectIngredient}
              />
            );
          })}
        </div>
      ) : (
        <p className="text-gray-500 italic">No ingredients found for this recipe.</p>
      )}
    </div>
  );
};

export default IngredientsSection;
